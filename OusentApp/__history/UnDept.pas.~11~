unit UnDept;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs,unbase_pnl, Vcl.StdCtrls, Vcl.ComCtrls,
  Vcl.Buttons, RzButton, Vcl.ExtCtrls, RzPanel, Vcl.Mask, Vcl.DBCtrls,
  AdvSmoothLabel, DBGridEhGrouping, ToolCtrlsEh, DBGridEhToolCtrls, DynVarsEh,
  EhLibVCL, GridsEh, DBAxisGridsEh, DBGridEh, AdvGlowButton, MemTableDataEh,
  Data.DB, MemTableEh, DataDriverEh, Data.Win.ADODB;

type
  TFrmDept = class(Tfrmbase_pnl)
    RzPanel2: TRzPanel;
    RzPanel3: TRzPanel;
    TreeView1: TTreeView;
    Label1: TLabel;
    RzPanel4: TRzPanel;
    RzPanel5: TRzPanel;
    RzPanel8: TRzPanel;
    RzPanel6: TRzPanel;
    Label3: TLabel;
    Label5: TLabel;
    DBEdit1: TDBEdit;
    Label6: TLabel;
    DBEdit2: TDBEdit;
    Label2: TLabel;
    advsmthlbl1: TAdvSmoothLabel;
    RzPanel10: TRzPanel;
    AdvGlowButton2: TAdvGlowButton;
    AdvGlowButton3: TAdvGlowButton;
    RzPanel12: TRzPanel;
    lbl_User: TLabel;
    RzPanel13: TRzPanel;
    AdvGlowButton5: TAdvGlowButton;
    AdvGlowButton6: TAdvGlowButton;
    Splitter1: TSplitter;
    RzPanel9: TRzPanel;
    GRD: TDBGridEh;
    RzPanel7: TRzPanel;
    Label4: TLabel;
    RzPanel11: TRzPanel;
    AdvGlowButton1: TAdvGlowButton;
    AdvGlowButton4: TAdvGlowButton;
    adt: TADODataSet;
    dsd: TDataSetDriverEh;
    dso: TDataSource;
    mte: TMemTableEh;
    adtUser: TADODataSet;
    dsdUser: TDataSetDriverEh;
    dsoUser: TDataSource;
    mteUser: TMemTableEh;
    Grd01: TDBGridEh;
    procedure mteAfterScroll(DataSet: TDataSet);
  private
    { Private declarations }
  public
    procedure MakeTree(Query:TAdoQuery; TreeView: TTreeView);
  end;

var
  FrmDept: TFrmDept;

implementation

{$R *.dfm}

procedure TFrmDept.MakeTree(Query: TAdoQuery; TreeView: TTreeView);
var
   List: TStringList ;
   Node:TTreeNode;

  Index: Integer;
begin
  TreeView.Items.BeginUpdate;
  try
    TreeView.Items.Clear;

    List := TStringList.Create;
    try
      List.Sorted := True;

      while not Query.Eof do
      begin
        if Query.FieldByName('ParentID').AsInteger = 0 then { ParentID=0，顶层节点 }
          Node := TreeView.Items.AddChild(nil, Query.FieldByName('Name').AsString)
        else
        begin
          Index := List.IndexOf(Query.FieldByName('ParentID').AsString);
          Node := TreeView.Items.AddChild(TTreeNode(List.Objects[Index]),
            Query.FieldByName('Name').AsString);
        end;
        List.AddObject(Query.FieldByName('ID').AsString, Node);
        Query.Next;
      end;
    finally
      List.Free;
    end;
  finally
    TreeView.Items.EndUpdate;
  end;
end;


procedure TFrmDept.mteAfterScroll(DataSet: TDataSet);
begin
  //inherited;
  lbl_User.Caption:='【'+mte.FieldByName('PName').AsString+'】的用户资料';
end;

end.
